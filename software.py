# -*- coding: utf-8 -*-
"""software.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12_zsPUwCsm1XS6djYquxRtTljIzp7xAv
"""

#Importam librarie
import pandas as pd
import numpy as np

from datetime import datetime, timedelta
from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
from statsmodels.tsa.arima_model import ARIMA
import statsmodels.api as sm
from statsmodels.tsa.statespace.sarimax import SARIMAX

import matplotlib.pyplot as plt

from google.colab import files
data = files.upload()#incarcarea datelor

import io#citirea a datelor
df = pd.read_csv(io.BytesIO(data['AirPassengers.csv']))
df.head()

df.isnull().sum()#Verificam  dacă există valori nule în setul nostru de date.

df.info()##Obținem detalii generale ale setului nostru de date

"""De sus putem vedea că tipul de date din coloana „Month” este „obiect”. Pentru a continua cu analiza serii de timp, trebuie să o facem ca format de data"""

df['Month']=pd.to_datetime(df['Month'])

#De asemenea, coloana de pasageri este în format int. Dar pentru calcul / predicție obținem în mare parte float dtype. Deci, actualizam dtype.
df['#Passengers']=df['#Passengers'].astype('float64')

df.info()##După conversia dtype, să obținem acum detaliile generale ale setului de date

"""Din nou pentru a lucra în analiza serii de timp, putem face coloana lunii în indexul setului de date"""

df.set_index('Month',inplace=True)

df['#Passengers'].plot(figsize=(18,5))# O sa vedem date nostru in graf representat

"""De sus putem vedea clar că datele noastre au o sezonalitate de 12 luni.

Înainte de a merge pentru analiza serii de timp, ar trebui să verificăm staționaritatea datelor.
Aici folosim testul Augmented Dicky-Fuller (ADF) și conceptul de ipoteză nulă pentru staționaritatea datelor
Crearea unei funcții pentru a utiliza acest test în mod frecvent
"""

def fullertest(series):
    result=adfuller(series)
    pvalue = result[1]
    if pvalue > .05:
        print('Avem dovezi grozave în care nu putem respinge ipoteza nulă și spunem că datele nu sunt staționare')
    else:
        print('Avem dovezi grozave în care nu putem respinge ipoteza nulă și spunem că datele sunt staționare')

#Acum putem sa folosim functia de mai sus pentru datele nostru
fullertest(df['#Passengers'])

"""De sus putem vedea că setul nostru de date nu este date staționare. Să folosim conceptul „Diferențiare” pentru a-l face staționar
Shifting 1 rând și găsim diferența
"""

df['1 Shifted Passengers'] = df['#Passengers'] - df['#Passengers'].shift(1)
print(df['1 Shifted Passengers'].head())
df = df.dropna()
df['1 Shifted Passengers'].plot()
fullertest(df['1 Shifted Passengers'])

#Graficul ACF și PACF pentru datele de mai sus
plot_acf(df['1 Shifted Passengers'])
plot_pacf(df['1 Shifted Passengers'])

#Schimbând 2 rânduri și găsim diferența
df['2 Shifted Passengers'] = df['#Passengers'] - df['#Passengers'].shift(2)
print(df['2 Shifted Passengers'].head())
df = df.dropna()
df['2 Shifted Passengers'].plot()
fullertest(df['2 Shifted Passengers'])

df['12 Shifted Passengers'] = df['#Passengers'] - df['#Passengers'].shift(12)
print(df['12 Shifted Passengers'].head())
df = df.dropna()
df['12 Shifted Passengers'].plot()
fullertest(df['12 Shifted Passengers'])

"""Graficul ACF și PACF pentru datele de mai sus"""

plot_acf(df['12 Shifted Passengers'])
plot_pacf(df['12 Shifted Passengers'])

"""De sus putem vedea că avem o dată staționară. Dar, după cum sa văzut deja, datele noastre au o sezonalitate de 12 date, să verificăm cu schimbarea de 12 luni."""

#Schimbând 12 rânduri și găsim diferența
df['12 Shifted Passengers'] = df['#Passengers'] - df['#Passengers'].shift(12)
print(df['12 Shifted Passengers'].head())
df = df.dropna()
df['12 Shifted Passengers'].plot()
fullertest(df['12 Shifted Passengers'])

#Graficul ACF și PACF pentru datele de mai sus
plot_acf(df['12 Shifted Passengers'])
plot_pacf(df['12 Shifted Passengers'])

"""Acum este timpul să creăm modelul.
 Cream mai întâi train_data si test_data
"""

train_dataset_end=datetime(1955,12,1)
test_dataset_end=datetime(1960,12,1)
train_data=df[:train_dataset_end]
test_data=df[train_dataset_end+timedelta(days=1):test_dataset_end]

#model ARIMA
model_ARIMA=sm.tsa.arima.ARIMA(train_data['#Passengers'],order=(0,2,0))
model_Arima_fit=model_ARIMA.fit()
model_Arima_fit.summary()

#Pentru predictii
pred_start_date=test_data.index[0]
pred_end_date=test_data.index[-1]
print(pred_start_date)
print(pred_end_date)

#Facem predictii de date de la model caream creat
pred=model_Arima_fit.predict(start=pred_start_date,end=pred_end_date)

#Crearea unei coloane și păstrarea datelor noastre prezise pentru a le evalua cu ușurință
test_data['Pred']=model_Arima_fit.predict(start=pred_start_date,end=pred_end_date)
test_data.head(10)

"""Să găsim reziduurile pentru a vedea eroarea în modelul nostru"""

residuals=test_data['#Passengers']-pred
residuals